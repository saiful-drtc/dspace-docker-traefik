networks:
  dspacenet:
    external: true
    name: dspacenet
  proxy:
    external: true

services:
  # DSpace (backend) webapp container
  dspace-api:
    image: "${DOCKER_REGISTRY:-dspace}/dspace-api:${DSPACE_VERSION:-latest}"
    container_name: dspace-api
    depends_on:
      - dspacedb
      - dspacesolr
    environment:
      - DSPACE_HOSTNAME=${DSPACE_HOSTNAME:-localhost}
      - dspace__P__dir=/dspace
      - db__P__url=jdbc:postgresql://dspacedb:5432/dspace
      - solr__P__server=http://dspacesolr:8983/solr
    volumes:
      - type: bind
        source: "${DATA_FOLDER}/assetstore"
        target: /dspace/assetstore
    networks:
      - dspacenet
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dspace-api.rule=Host(`${DSPACE_HOSTNAME}`) && PathPrefix(`/server`)"
      - "traefik.http.services.dspace-api.loadbalancer.server.port=8080"
      - "traefik.http.routers.dspace-api.middlewares=add-baseurl"
      - "traefik.http.middlewares.add-baseurl.stripprefix.prefixes=/server"

  # DSpace database container    
  dspacedb:
    container_name: dspacedb
    environment:
      PGDATA: /pgdata
    image: dspace/dspace-postgres-pgcrypto
    networks:
      dspacenet:
    volumes:
      - ${DATA_FOLDER}/pgdata:/pgdata
  
  # DSpace Solr container  
  dspacesolr:
    container_name: dspacesolr
    # Uses official Solr image at https://hub.docker.com/_/solr/
    image: solr:8.11-slim
    # Needs main 'dspace' container to start first to guarantee access to solr_configs
    depends_on:
      - dspace-api
    networks:
      dspacenet:
    #ports:
    #  - "8983:8983"
    working_dir: /var/solr/data
    volumes:
      # Mount our "solr_configs" volume available under the Solr's configsets folder (in a 'dspace' subfolder)
      # This copies the Solr configs from main 'dspace' container into 'dspacesolr' via that volume
      - ${DATA_FOLDER}/solr_configs:/opt/solr/server/solr/configsets/dspace
      # Keep Solr data directory between reboots
      - solr_data:/var/solr/data
      # Initialize all DSpace Solr cores using the mounted local configsets (see above), then start Solr
      # * First, run precreate-core to create the core (if it doesn't yet exist). If exists already, this is a no-op
      # * Second, copy updated configs from mounted configsets to this core. If it already existed, this updates core
      #   to the latest configs. If it's a newly created core, this is a no-op.
    entrypoint:
      - /bin/bash
      - '-c'
      - |
        init-var-solr
        precreate-core authority /opt/solr/server/solr/configsets/dspace/authority
        cp -r -u /opt/solr/server/solr/configsets/dspace/authority/* authority
        precreate-core oai /opt/solr/server/solr/configsets/dspace/oai
        cp -r -u /opt/solr/server/solr/configsets/dspace/oai/* oai
        precreate-core search /opt/solr/server/solr/configsets/dspace/search
        cp -r -u /opt/solr/server/solr/configsets/dspace/search/* search
        precreate-core statistics /opt/solr/server/solr/configsets/dspace/statistics
        cp -r -u /opt/solr/server/solr/configsets/dspace/statistics/* statistics
        exec solr -f

volumes:
  solr_data:
